<style>
    #page {
        font-family:Courier New,serif;
        font-size:8px;
    }
</style>
<script type="text/javascript" src="http://www.thomann.de/static/jquery-1.4.2.min.js"></script>

<script>
    
    var history = [];
    var aktPage = 0;

    var table = {
        0:'0000',
        1:'0001',
        2:'0010',
        3:'0011',
        4:'0100',
        5:'0101',
        6:'0110',
        7:'0111',
        8:'1000',
        9:'1001',
        '+':'1010',
        '-':'1011',
        '*':'1100',
        '/':'1001'
    }
    var reverseTable = {};

    function getReverseTable( table ) {
        var tmp = {};
        for( var k in table ) {
            tmp[ table[ k ] ] = k;
        }
        return tmp;
    }

    function main( pool, target ) {
        var history = [];
    
        var f = null;
        var success = false;
        for( var k in pool ) {
            f = getFitness( pool[ k ].s, target );
            pool[ k ].f = f;
            if( f == Infinity ) {
                success = true;
                pool.sort( function( a, b ) { return ( a.f - b.f )*-1 } );
                history.push( $.extend( true, [], pool ) );
                break;
            }
        }

        if ( !success ) {
            var c = 0;
            while( c++ < 15000 ) {
                pool.sort( function( a, b ) { return ( a.f - b.f )*-1 } );
                history.push( $.extend( true, [], pool ) );

                var parents = chooseParents( pool );
                var m = mutate( parents[ 0 ].s, parents[ 1 ].s );
                var mF = getFitness( m, target );
                if ( mF > pool[ pool.length-1 ].f ) {
                    pool[ pool.length-1 ].s = m;
                    pool[ pool.length-1 ].f = mF;

                    if ( mF == Infinity  ) {
                        pool.sort( function( a, b ) { return ( a.f - b.f )*-1 } );
                        history.push( $.extend( true, [], pool ) );
                        break;
                    }
                }
            }
        }

        return history;
    }

    function generateGenePool( l, genPoolSize ) {

        var genePool = [];
        for( var i = 0; i < genPoolSize; i++ ) {
            var tmp = '';
            for( var y = 0; y < l*4; y++ ) {
                tmp += ( Math.random() > 0.5 ? '1' : '0' );
            }
            genePool.push( { f:1, s: tmp } );
        }

        return genePool;

    }


    function interpreteGenome( g ) {
        var group = '';
        var ret = '';
        for( var i = 0; i < g.length/4; i++ ) {
            group = '';
            group += g.charAt( i* 4 );
            group += g.charAt( i* 4+1 );
            group += g.charAt( i* 4+2 );
            group += g.charAt( i* 4+3 );

            var tmp = reverseTable[ group ];
            if ( tmp ) {
                ret += reverseTable[ group ];
            }
        }

        return ret;
    }

    function parseGenome( g ) {
        var state = 's1';
        var tmp = '';

        //finite state machine for the win
        for( var i = 0; i < g.length; i++ ) {
            var c = g.charAt( i );

            if ( state == 's1' ) {
                if ( $.inArray( c, ['1','2','3','4','5','6','7','8','9'] ) >= 0 ) {
                    state = 's2';
                    tmp += c;
                }
            } else if ( state == 's2' ) {
                if ( $.inArray( c, ['0', '1','2','3','4','5','6','7','8','9'] ) >= 0 ) {
                    state = 's2';
                    tmp += c;
                } else if ( $.inArray( c, ['+','-','*','/'] ) >= 0 ) {
                    state = 's1';
                    tmp += c;
                }
            }/* else if ( state == 's3' ) {
                if ( $.inArray( c, ['+','-','*','/'] ) >= 0 ) {
                    state = 's1';
                    tmp += c;
                }
            }*/
        }
        if ( state == 's1' ) {
            tmp = tmp.substring( 0, tmp.length-1 );
        }

        return tmp;
    }
    
    function chooseParents( pool ) {
        c1 = parseInt( Math.random() * (pool.length) );
        do {
            c2 = parseInt( Math.random() * (pool.length) );
        } while( c1 == c2 );

        return { 0: pool[ c1 ], 1: pool[ c2 ] };
    }
    
    function mutate( p1, p2 ) {
        var tmp = '';

        /*
        for( var i = 0; i < p1.length; i++ ) {
            if ( Math.random() < 0.5 ) {
                tmp += p1.charAt( i );
            } else {
                tmp += p2.charAt( i );
            }
        }
        */



        var nr = parseInt( Math.random() * (p1.length+1) );

        tmp = p1.slice( 0, nr ).concat( p2.slice( nr ) );
        

        var a = tmp.split('');
        nr = parseInt( Math.random() * tmp.length );
        a[ nr ] = ( parseInt( tmp.charAt( nr ) ) + 1 ) % 2;
        return a.join( '' );
    }
    
    function getFitness( source, target ) {
        var g = interpreteGenome( source );
        var p = parseGenome( g );
        var v = eval( p );

        var f = 1 / Math.abs( target - v );

        return f;
    }
    
    function showHistory( h ) {
        $('#number').html( '<h1>' + h.length + ' generationen (bestes Ergebnis: ' + parseGenome( interpreteGenome( h[ h.length-1 ][0].s ) )   + ')' );
        $('#nr').val( 0 );

        aktPage = h.length-1;
        showHistoryPage( h[ h.length-1 ], h.length-1 );
    }
    
    function showHistoryPage( p, nr ) {
        nr = parseInt( nr );
    
        $('#nr').val( nr+1 );
    
        $('#page').html( '' );
        var tmp = '<h2>' + (nr+1) + '</h2>';
        for( var k in p ) {
            var row = p[k].s;
            var interpreted = interpreteGenome(row);
            var parsed = parseGenome( interpreted );
            var evaled = eval( parsed );
            tmp += '<tr><td>' + htmlEntities( row ) + '</td><td>' + p[ k ].f + '</td><td>' + interpreted + '</td><td>' + parsed + '</td><td>' + evaled + '</td></tr>';
        }
        $('#page').html( '<table cellspacing="5" border="1"><tr><th>genome</th><th>fitness</th><th>interpreted</th><th>parsed</th><th>value</th></tr>' + tmp + '</table>' );
    }
    
    function htmlEntities(str) {
        return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace( ' ', '&nbsp;' );
    }

    $(document).ready( function() {

        reverseTable = getReverseTable( table );

        $('#calc').click( function() {
            history = [];
            aktPage = 0;
        
            var term = parseInt( $('#term').val() );
            var pool = generateGenePool( 12, 30 );

            history = main( pool, term );

            showHistory( history );
        } );
        
        $('#lt').click( function() {
            if ( aktPage > 0 ) {
                aktPage--;
                showHistoryPage( history[ aktPage ], aktPage );
            }
        } );
        
        $('#gt').click( function() {
            if ( aktPage < history.length-1 ) {
                aktPage++;
                showHistoryPage( history[ aktPage ], aktPage );
            }
        } );
        
        $('#anspringen').click( function() {
            var nr = parseInt( $('#nr').val() ) - 1;
            aktPage = nr;
            showHistoryPage( history[ nr ], nr );
        } );
        
    } );
    
</script>   

<div id="ausgabe">
    <input type="text" id="term"><input type="button" id="calc" value="calc"><br>

    <input type="button" id="lt" value="&lt;---"><input type="button" id="gt" value="---&gt;">
    <input type="text" id="nr"><input type="button" id="anspringen" value="anspringen">
    <div id="number"></div>
    <div id="page"></div>
</div>







